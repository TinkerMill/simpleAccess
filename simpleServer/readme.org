* Overview
	The simple server is used to query for access on a device.  This is meant as a
	very simple interface that easy easily accessible to many different device types
	(arduino, pi..etc)  as such the return format is kept very simple so it is
	easy for those devices to parse the output without a lot of extra libraries or cpu.

	The rest syntax is built in a way to allow you to walk through the data.

** install
	 Steps to install the software
	 - for the server to run as a windows service, you'll need pywin32, which you can
		 download from [[http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/][here]]  I used the pywin32-219.win32-py2.7.exe  version
	 - make sure flask is installed:  pip install flask
	 - currently the configuration file location is hard coded in the the server.py
		 program.  update the path to point to the run.cfg file.
	 - update run.cfg and point the database to a place that exists.
	 - if you change the password make sure you update the client to use that password.
	 - If you make changes to the schema, there is a cleardb.bat script you can run
		 from the directory that contains server.py.  This will DELETE the current database
		 and recreate it with the schema.sql file.
	 - the schema.sql file is the schema of the database.  Update this if you want to make
		 any changes
   - When you are ready to run the software as a service, change to the directory that
		 contains server.py  and run: python server.py install
	 - once the service is installed you can also start and stop the service by running:
		 python server.py start , or , python server.py stop

** User Access
	 user access is done through the adduser.py script which is located within the server
	 directory.
	 #+begin_src sh
   adduser.py <username> <device> <level 0=none 1=user 2=trainer> <trainerid> <optional_badge_id>
	 #+end_src
	 The adduser script reads run.cfg to figure out the serial port and serial port speed
	 at which to scan for the badge code.  Once you run the adduser command with the
	 above options, it'll then ask you to scan the badge of the user you are entering
	 access for.

	 if you specify the optional_badge_id the serial port won't be used to scan the badge, and
	 it'll use that value as the badge code.
*** verify access
		once you have users added, you can run the listuser.py script to list all the users
		in the database, and what level of access they have.

** API Usage
	 The simple server has no access (currently) beyond a rest based API.

*** device list
	 This will return a list of all devices.  the format is a comma separated list of
	 device id : device name: *0:laser cutter,1:3d printer*
	 #+begin_src sh
   curl http://localhost:5000/device
	 #+end_src
*** device information
		this will return information on the device in a comma separated list: *1,3d printer,fancy 3d printer*
		#+begin_src sh
    curl http://localhost:5000/device/<deviceid>
		#+end_src
*** device user list
		this will return a list of all user IDs that have access to the device.  The format
		of the results are userid:username in a comma separated list.
		#+begin_src sh
    curl http://localhost:5000/device/<deviceid>/user
		#+end_src
*** device user access
		this will return the access a userid has to a device.  The format is
		just a single number of the access level.
		#+begin_src sh
    curl http://localhost:5000/device/<deviceid>/user/<userid>
		#+end_src
*** device access via dongle code
		this is the important function, this will allow you to supply the device id
		and the dongle code, and find out if that dongle has access to the device. The format
		of the result is a number indicating the access level.
		#+begin_src sh
    curl http://localhost:5000/device/<deviceid>/code/<code>
		#+end_src
*** user list
		this will list out all the users.  The format is a comma separated list of
		user id:user name: *0:matt,1:ron*
		#+begin_src sh
    curl http://localhost:5000/user
		#+end_src
*** user info
		this will return information on the user in a comma separated list: *0,matt*
		#+begin_src sh
    curl http://localhost:5000/user/<userid>
		#+end_src
*** user device list
		this will return a list of all the devices a user has access to.  The format is a
		comma separated list of device id(s).
		#+begin_src sh
    curl http://localhost:5000/user/<userid>/device
		#+end_src
*** user device access
		this will return the access level a user has to a device.
		#+begin_src sh
    curl http://localhost:5000/user/<userid>/device/<deviceid>
		#+end_src


** Updating the Database
	 This will go away in the future, but for now, this is how you can easily add records.
*** add a user
		#+begin_src sh
    curl http://localhost:5000/update/a/add/user/<name>/<badgecode>
		#+end_src
*** add a device
		#+begin_src sh
    curl http://localhost:5000/update/a/add/device/<name>/<description>
		#+end_src
*** add device access
		#+begin_src sh
    curl http://localhost:5000/update/a/add/access/<userid>/<deviceid>/<levelofaccess>
		#+end_src
